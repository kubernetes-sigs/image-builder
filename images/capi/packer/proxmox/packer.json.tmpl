{
  "builders": [
    {
      "boot_command": [
        "{{user `boot_command_prefix`}}",
        "{{user `boot_media_path`}}",
        "{{user `boot_command_suffix`}}"
      ],
      "boot_wait": "{{user `boot_wait`}}",
      "bios": "{{user `bios`}}",
      "communicator": "ssh",
      "cores": "{{user `cores`}}",
      "cpu_type": "{{user `cpu_type`}}",
      "disks": [
        {
          "disk_size": "{{user `disk_size`}}",
          "format": "{{user `disk_format`}}",
          "storage_pool": "{{user `storage_pool`}}",
          "storage_pool_type": "{{user `storage_pool_type`}}",
          "type": "scsi"
        }
      ],
      "efi_config": {
        "efi_storage_pool": "{{user `storage_pool`}}",
        "pre_enrolled_keys": true,
        "efi_type": "4m"
      },
      "scsi_controller": "{{user `scsi_controller`}}",
      "http_directory": "{{user `http_directory`}}",
      "insecure_skip_tls_verify": true,
      "iso_checksum": "{{user `iso_checksum_type`}}:{{user `iso_checksum`}}",
      "iso_file": "{{user `iso_file`}}",
      "iso_storage_pool": "{{user `iso_storage_pool`}}",
      "iso_url": "{{user `iso_url`}}",
      "memory": "{{user `memory`}}",
      "name": "{{user `build_name`}}",
      "network_adapters": [
        {
          "bridge": "{{user `bridge`}}",
          "mtu": "{{ user `mtu` }}",
          "vlan_tag": "{{user `vlan_tag`}}"
        }
      ],
      "node": "{{ user `node` }}",
      "numa": "{{ user `numa` }}",
      "sockets": "{{user `sockets`}}",
      "ssh_password": "{{user `ssh_password`}}",
      "ssh_timeout": "2h",
      "ssh_username": "{{user `ssh_username`}}",
      "template_name": "{{ user `artifact_name` }}",
      "type": "proxmox-iso",
      "unmount_iso": "{{user `unmount_iso`}}",
      "vm_id": "{{user `vmid`}}"
    }
  ],
  "post-processors": [
    {
      "environment_vars": [
        "CUSTOM_POST_PROCESSOR={{user `custom_post_processor`}}"
      ],
      "inline": [
        "if [ \"$CUSTOM_POST_PROCESSOR\" != \"true\" ]; then exit 0; fi",
        "{{user `custom_post_processor_command`}}"
      ],
      "name": "custom-post-processor",
      "type": "shell-local"
    }
  ],
  "provisioners": [
    {
      "environment_vars": [
        "BUILD_NAME={{user `build_name`}}"
      ],
      "inline": [
        "if [ $BUILD_NAME != \"ubuntu\" ]; then exit 0; fi",
        "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done",
        "sudo apt-get -qq update",
        "echo done"
      ],
      "inline_shebang": "/bin/bash -e",
      "type": "shell"
    },
    {
      "environment_vars": [
        "PYPY_HTTP_SOURCE={{user `pypy_http_source`}}"
      ],
      "execute_command": "BUILD_NAME={{user `build_name`}}; if [[ \"${BUILD_NAME}\" == *\"flatcar\"* ]]; then sudo {{.Vars}} -S -E bash '{{.Path}}'; fi",
      "script": "./packer/files/flatcar/scripts/bootstrap-flatcar.sh",
      "type": "shell"
    },
    {
      "ansible_env_vars": [
        "ANSIBLE_SSH_ARGS='{{user `existing_ansible_ssh_args`}} {{user `ansible_common_ssh_args`}}'",
        "KUBEVIRT={{user `kubevirt`}}"
      ],
      "extra_arguments": [
        "--extra-vars",
        "{{user `ansible_common_vars`}}",
        "--extra-vars",
        "{{user `ansible_extra_vars`}}",
        "--extra-vars",
        "{{user `ansible_user_vars`}}",
        "--scp-extra-args",
        "{{user `ansible_scp_extra_args`}}"
      ],
      "playbook_file": "./ansible/playbooks/firstboot.yml",
      "type": "ansible",
      "user": "builder"
    },
    {
      "expect_disconnect": true,
      "inline": [
        "sudo reboot now"
      ],
      "inline_shebang": "/bin/bash -e",
      "type": "shell"
    },
    {
      "ansible_env_vars": [
        "ANSIBLE_SSH_ARGS='{{user `existing_ansible_ssh_args`}} {{user `ansible_common_ssh_args`}}'",
        "KUBEVIRT={{user `kubevirt`}}"
      ],
      "extra_arguments": [
        "--extra-vars",
        "{{user `ansible_common_vars`}}",
        "--extra-vars",
        "{{user `ansible_extra_vars`}}",
        "--extra-vars",
        "{{user `ansible_user_vars`}}",
        "--scp-extra-args",
        "{{user `ansible_scp_extra_args`}}"
      ],
      "pause_before": "10s",
      "playbook_file": "./ansible/playbooks/node.yml",
      "type": "ansible",
      "user": "builder"
    },
    {
      "arch": "{{user `goss_arch`}}",
      "format": "{{user `goss_format`}}",
      "format_options": "{{user `goss_format_options`}}",
      "goss_file": "{{user `goss_entry_file`}}",
      "inspect": "{{user `goss_inspect_mode`}}",
      "tests": [
        "{{user `goss_tests_dir`}}"
      ],
      "type": "goss",
      "url": "{{user `goss_url`}}",
      "use_sudo": true,
      "vars_file": "{{user `goss_vars_file`}}",
      "vars_inline": {
        "ARCH": "amd64",
        "OS": "{{user `distro_name` | lower}}",
        "OS_VERSION": "{{user `distribution_version` | lower}}",
        "PROVIDER": "qemu",
        "containerd_version": "{{user `containerd_version`}}",
        "kubernetes_cni_deb_version": "{{ user `kubernetes_cni_deb_version` }}",
        "kubernetes_cni_rpm_version": "{{ split (user `kubernetes_cni_rpm_version`) \"-\" 0 }}",
        "kubernetes_cni_source_type": "{{user `kubernetes_cni_source_type`}}",
        "kubernetes_cni_version": "{{user `kubernetes_cni_semver` | replace \"v\" \"\" 1}}",
        "kubernetes_deb_version": "{{ user `kubernetes_deb_version` }}",
        "kubernetes_rpm_version": "{{ split (user `kubernetes_rpm_version`) \"-\" 0  }}",
        "kubernetes_source_type": "{{user `kubernetes_source_type`}}",
        "kubernetes_version": "{{user `kubernetes_semver` | replace \"v\" \"\" 1}}"
      },
      "version": "{{user `goss_version`}}"
    },
    {
      "expect_disconnect": true,
      "inline": [
        "echo '{{user `ssh_password`}}' | sudo -S -E sh -c 'usermod -L {{user `ssh_username`}} && shutdown'"
      ],
      "inline_shebang": "/bin/bash -e",
      "type": "shell"
    }
  ],
  "variables": {
    "ansible_common_vars": "",
    "ansible_extra_vars": "ansible_python_interpreter=/usr/bin/python3",
    "ansible_scp_extra_args": "",
    "ansible_user_vars": "",
    "artifact_name": "{{user `build_name`}}-kube-{{user `kubernetes_semver`}}",
    "boot_wait": "10s",
    "bios": "seabios",
    "bridge": "{{env `PROXMOX_BRIDGE`}}",
    "build_timestamp": "{{timestamp}}",
    "containerd_sha256": null,
    "containerd_url": "https://github.com/containerd/containerd/releases/download/v{{user `containerd_version`}}/cri-containerd-cni-{{user `containerd_version`}}-linux-amd64.tar.gz",
    "containerd_version": null,
    "cores": "2",
    "crictl_url": "https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{user `crictl_version`}}/crictl-v{{user `crictl_version`}}-linux-amd64.tar.gz",
    "crictl_version": null,
    "disk_format": "qcow2",
    "disk_size": "20G",
    "existing_ansible_ssh_args": "{{env `ANSIBLE_SSH_ARGS`}}",
    "http_directory": "./packer/proxmox/linux/{{user `distro_name`}}/http/",
    "iso_storage_pool": "{{env `PROXMOX_ISO_POOL`}}",
    "kubernetes_cni_deb_version": null,
    "kubernetes_cni_http_source": null,
    "kubernetes_cni_rpm_version": null,
    "kubernetes_cni_semver": null,
    "kubernetes_cni_source_type": null,
    "kubernetes_container_registry": null,
    "kubernetes_deb_gpg_key": null,
    "kubernetes_deb_repo": null,
    "kubernetes_deb_version": null,
    "kubernetes_http_source": null,
    "kubernetes_load_additional_imgs": null,
    "kubernetes_rpm_gpg_check": null,
    "kubernetes_rpm_gpg_key": null,
    "kubernetes_rpm_repo": null,
    "kubernetes_rpm_version": null,
    "kubernetes_semver": null,
    "kubernetes_series": null,
    "kubernetes_source_type": null,
    "memory": "2048",
    "mtu": "{{env `PROXMOX_MTU`}}",
    "node": "{{env `PROXMOX_NODE`}}",
    "numa": "false",
    "oem_id": "{{ user `oem_id` }}",
    "proxmox_url": "{{env `PROXMOX_URL`}}",
    "sockets": "2",
    "ssh_password": "$SSH_PASSWORD",
    "ssh_username": "builder",
    "storage_pool": "{{env `PROXMOX_STORAGE_POOL`}}",
    "storage_pool_type": "lvm",
    "token": "{{env `PROXMOX_TOKEN`}}",
    "username": "{{env `PROXMOX_USERNAME`}}",
    "vlan_tag": "{{env `PROXMOX_VLAN`}}",
    "vmid": "",
    "scsi_controller": "virtio-scsi-pci"
  }
}
