command:
  containerd --version | awk -F' ' '{print substr($3,2); }':
    exit-status: 0
    stdout: []
    stderr: []
    timeout: 0
  crictl ps:
    exit-status: 0
    stdout: []
    stderr: []
    timeout: 0
{{if eq .Vars.kubernetes_source_type "pkg"}}
{{if eq .Vars.kubernetes_cni_source_type "pkg"}}
  crictl images | grep -v 'IMAGE ID' | awk -F'[ /]' '{print $2}' | sed 's/-{{ .Vars.arch }}//g' | sort:
    exit-status: 0
    stderr: []
    timeout: 0
    stdout: ["coredns", "etcd", "kube-apiserver", "kube-controller-manager", "kube-proxy", "kube-scheduler", "pause"]
{{end}}
{{end}}
{{if and (eq .Vars.kubernetes_source_type "http") (eq .Vars.kubernetes_cni_source_type "http") (not .Vars.kubernetes_load_additional_imgs)}}
# The second last pipe of awk is to take out arch from kube-apiserver-amd64 (i.e. amd64 or any other arch)
  crictl images | grep -v 'IMAGE ID' | awk -F'[ /]' '{print $2}' | sed 's/-{{ .Vars.arch }}//g' | sort:
    exit-status: 0
    stderr: []
    timeout: 0
    stdout: ["kube-apiserver", "kube-controller-manager", "kube-proxy", "kube-scheduler"]
{{end}}
{{if and (eq .Vars.kubernetes_source_type "http") (eq .Vars.kubernetes_cni_source_type "http") (.Vars.kubernetes_load_additional_imgs)}}
# The second last pipe of awk is to take out arch from kube-apiserver-amd64 (i.e. amd64 or any other arch)
  crictl images | grep -v 'IMAGE ID' | awk -F'[ /]' '{print $2}' | sed 's/-{{ .Vars.arch }}//g' | sort:
    exit-status: 0
    stderr: []
    timeout: 0
    stdout: ["coredns", "etcd", "kube-apiserver", "kube-controller-manager", "kube-proxy", "kube-scheduler", "pause"]
{{end}}
{{if eq .Vars.kubernetes_source_type "http"}}
  kubectl version --short --client=true -o json | jq .clientVersion.gitVersion | tr -d '"' | awk '{print substr($1,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_version }}]
    stderr: []
    timeout: 0
  kubeadm version -o json | jq .clientVersion.gitVersion | tr -d '"' | awk '{print substr($1,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_version }}]
    stderr: []
    timeout: 0
  kubelet --version | awk -F' ' '{print $2}'  | tr -d '"' | awk '{print substr($1,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_version }}]
    stderr: []
    timeout: 0
{{end}}
{{if eq .Vars.kubernetes_cni_source_type "http"}}
  /opt/cni/bin/host-device 2>&1 | awk -F' ' '{print substr($4,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_cni_version }}]
    stderr: []
    timeout: 0
{{end}}
{{range $name, $vers := index .Vars .Vars.OS .Vars.PROVIDER "command"}}
  {{ $name }}:
  {{range $key, $val := $vers}}
    {{$key}}: {{$val}}
  {{end}}
{{end}}
