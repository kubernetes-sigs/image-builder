command:
{{ if ne .Vars.OS "windows" }} # Linux Only
  containerd --version | awk -F' ' '{print substr($3,2); }':
    exit-status: 0
    stdout: []
    stderr: []
    timeout: 0
  crictl ps:
    exit-status: 0
    stdout: []
    stderr: []
    timeout: 0
{{if eq .Vars.kubernetes_source_type "pkg"}}
{{if eq .Vars.kubernetes_cni_source_type "pkg"}}
  crictl images | grep -v 'IMAGE ID' | awk -F'[ /]' '{print $2}' | sed 's/-{{ .Vars.arch }}//g' | sort:
    exit-status: 0
    stderr: []
    timeout: 0
    stdout: ["coredns", "etcd", "kube-apiserver", "kube-controller-manager", "kube-proxy", "kube-scheduler", "pause"]
{{end}}
{{end}}
{{if and (eq .Vars.kubernetes_source_type "http") (eq .Vars.kubernetes_cni_source_type "http") (not .Vars.kubernetes_load_additional_imgs)}}
# The second last pipe of awk is to take out arch from kube-apiserver-amd64 (i.e. amd64 or any other arch)
  crictl images | grep -v 'IMAGE ID' | awk -F'[ /]' '{print $2}' | sed 's/-{{ .Vars.arch }}//g' | sort:
    exit-status: 0
    stderr: []
    timeout: 0
    stdout: ["kube-apiserver", "kube-controller-manager", "kube-proxy", "kube-scheduler"]
{{end}}
{{if and (eq .Vars.kubernetes_source_type "http") (eq .Vars.kubernetes_cni_source_type "http") (.Vars.kubernetes_load_additional_imgs)}}
# The second last pipe of awk is to take out arch from kube-apiserver-amd64 (i.e. amd64 or any other arch)
  crictl images | grep -v 'IMAGE ID' | awk -F'[ /]' '{print $2}' | sed 's/-{{ .Vars.arch }}//g' | sort:
    exit-status: 0
    stderr: []
    timeout: 0
    stdout: ["coredns", "etcd", "kube-apiserver", "kube-controller-manager", "kube-proxy", "kube-scheduler", "pause"]
{{end}}
{{if eq .Vars.kubernetes_source_type "http"}}
  kubectl version --short --client=true -o json | jq .clientVersion.gitVersion | tr -d '"' | awk '{print substr($1,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_version }}]
    stderr: []
    timeout: 0
  kubeadm version -o json | jq .clientVersion.gitVersion | tr -d '"' | awk '{print substr($1,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_version }}]
    stderr: []
    timeout: 0
  kubelet --version | awk -F' ' '{print $2}'  | tr -d '"' | awk '{print substr($1,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_version }}]
    stderr: []
    timeout: 0
{{end}}
{{if eq .Vars.kubernetes_cni_source_type "http"}}
  /opt/cni/bin/host-device 2>&1 | awk -F' ' '{print substr($4,2); }':
    exit-status: 0
    stdout: [{{ .Vars.kubernetes_cni_version }}]
    stderr: []
    timeout: 0
{{end}}
{{range $name, $vers := index .Vars .Vars.OS .Vars.PROVIDER "command"}}
  {{ $name }}:
  {{range $key, $val := $vers}}
    {{$key}}: {{$val}}
  {{end}}
{{end}}
{{end}} #End linux only 

{{ if eq .Vars.OS "windows" }} # Windows
  automatic updates set to notify:
    exit-status: 0
    exec: powershell -command "(Get-ItemPropertyValue 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -name AUOptions) -eq '2'"
    stdout:
    - "True"
    timeout: 30000
  automatic updates set to notify with correct type:
    exit-status: 0
    exec: powershell -command "(Get-ItemPropertyValue 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -name AUOptions).GetType().Name -eq 'Int32'"
    stdout:
    - "True"
    timeout: 30000
  automatic updates are disabled:
    exit-status: 0
    exec: powershell -command "(Get-ItemPropertyValue 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -name NoAutoUpdate) -eq '1'"
    stdout:
    - "True"
    timeout: 30000
  automatic updates are disabled with correct type:
    exit-status: 0
    exec: powershell -command "(Get-ItemPropertyValue 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -name NoAutoUpdate).GetType().Name -eq 'Int32'"
    stdout:
    - "True"
    timeout: 30000
  kubectl version --client:
    exit-status: 0
    stdout:
    - {{.Vars.kubernetes_version}}
    - "windows"
    - {{.Vars.arch}}
    timeout: 30000
  kubeadm version:
    exit-status: 0
    stdout:
    - {{.Vars.kubernetes_version}}
    - "windows"
    - {{.Vars.arch}}
    timeout: 30000
  kubelet --version:
    exit-status: 0
    stdout:
    - {{.Vars.kubernetes_version}}
    timeout: 10000
  Check Symbolic link to /etc/kubernetes/pki:
    exit-status: 0
    exec: powershell -command "(Get-item -path $env:SystemDrive\var\lib\kubelet\etc\kubernetes\pki| select LinkType,Target)"
    stdout:
    - SymbolicLink 
    - C:\etc\kubernetes\pki\
{{ if eq .Vars.distribution_version "2019" }}
  Windows build version is high enough:
    exit-status: 0
    exec: powershell -command "(Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name UBR).UBR -ge 1817"
    stdout:
    - "True"
    timeout: 30000
{{end}}
{{ if eq .Vars.runtime "containerd" }}
  Correct Containerd Version:
    exec: "\"/Program Files/containerd/containerd.exe\" --version"
    exit-status: 0
    stdout:
    - "{{.Vars.containerd_version}}"
    timeout: 30000
  Correct Containerd cni config:
    exec: "\"/Program Files/containerd/containerd.exe\" config dump"
    exit-status: 0
    stdout:
    - "sandbox_image = \"{{.Vars.pause_image}}\""
    - "conf_dir = \"C:/etc/cni/net.d\""
    - "bin_dir = \"C:/opt/cni/bin\""
    timeout: 30000
  Check Windows Defender Exclusions are in place:
    exit-status: 0
    exec: powershell -command "(Get-MpPreference | select ExclusionProcess)"
    stdout:
    - \Program Files\containerd\containerd.exe, 
    - \Program Files\containerd\ctr.exe
  Check SMB CompartmentNamespace Flag:
    exit-status: 0
    exec: powershell -command "(Get-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Services\hns\State' -Name EnableCompartmentNamespace).EnableCompartmentNamespace -eq 1"
    stdout:
    - True
    timeout: 30000
  Windows Port Range is Expanded:
    exit-status: 0
    exec: netsh int ipv4 show dynamicportrange tcp
    stdout:
    - "Start Port      : 33000"
    - "Number of Ports : 32536"
    timeout: 30000
{{end}}

{{ if eq .Vars.runtime "docker-ee" }}
  Correct Docker Version:
    exec: "docker.exe version"
    exit-status: 0
    stdout:
    - "{{.Vars.docker_ee_version}}"
    timeout: 30000
{{end}}

{{if eq .Vars.PROVIDER "azure"}}
  Verify firewall rule to block 168.63.129.16:80 for cve-2021-27075:
    exit-status: 0
    exec: powershell -command "(Get-NetFirewallRule -ErrorAction Stop -DisplayName 'Block-Outbound-168.63.129.16-port-80-for-cve-2021-27075').Enabled"
    stdout:
    - True
    stderr: []
    timeout: 30000
{{end}}
{{end}} #end windows
