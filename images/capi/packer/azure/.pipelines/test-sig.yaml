# Required pipeline variables:
# - BUILD_POOL - Azure DevOps build pool to use
# - AZ_CAPI_EXTENSION_URL - URL to the Azure CAPI extension build.
# - KUBERNETES_VERSION - version of Kubernetes to build the image with, e.g. `1.16.2`
# - OS - target of build e.g. `Ubuntu/Windows`
# - OS_VERSION - target of build e.g. `22.04/2004/2019`
# - SERVICE_CONNECTION - Azure DevOps service connection to use for the Azure CLI

jobs:
- job: test_sig
  timeoutInMinutes: 120
  strategy:
    maxParallel: 0
  pool:
    name: $(BUILD_POOL)
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: publishing-info
      path: $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/
  - script: |
      set -euo pipefail
      [[ -n ${DEBUG:-} ]] && set -o xtrace

      OS_TYPE=$(jq -r .os_type $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      MANAGED_IMAGE_RESOURCE_GROUP_NAME=$(jq -r .managed_image_resource_group_name $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      MANAGED_IMAGE_NAME=$(jq -r .managed_image_name $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      MANAGED_IMAGE_ID=$(jq -r .managed_image_id $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      MANAGED_IMAGE_LOCATION=$(jq -r .managed_image_location $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      MANAGED_IMAGE_SHARED_IMAGE_GALLERY_ID=$(jq -r .managed_image_shared_image_gallery_id $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      SHARED_IMAGE_GALLERY_RESOURCE_GROUP=$(jq -r .shared_image_gallery_resource_group $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      SHARED_IMAGE_GALLERY_NAME=$(jq -r .shared_image_gallery_name $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      SHARED_IMAGE_GALLERY_IMAGE_NAME=$(jq -r .shared_image_gallery_image_name $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      SHARED_IMAGE_GALLERY_IMAGE_VERSION=$(jq -r .shared_image_gallery_image_version $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      SHARED_IMAGE_GALLERY_REPLICATED_REGIONS=$(jq -r .shared_image_gallery_replicated_regions $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)
      TAGS=$(jq -r .tags $(system.defaultWorkingDirectory)/images/capi/packer/azure/sig/sig-publishing-info.json)

      echo "##vso[task.setvariable variable=OS_TYPE;]$OS_TYPE"
      echo "##vso[task.setvariable variable=MANAGED_IMAGE_RESOURCE_GROUP_NAME;]$MANAGED_IMAGE_RESOURCE_GROUP_NAME"
      echo "##vso[task.setvariable variable=MANAGED_IMAGE_NAME;]$MANAGED_IMAGE_NAME"
      echo "##vso[task.setvariable variable=MANAGED_IMAGE_ID;]$MANAGED_IMAGE_ID"
      echo "##vso[task.setvariable variable=MANAGED_IMAGE_LOCATION;]$MANAGED_IMAGE_LOCATION"
      echo "##vso[task.setvariable variable=MANAGED_IMAGE_SHARED_IMAGE_GALLERY_ID;]$MANAGED_IMAGE_SHARED_IMAGE_GALLERY_ID"
      echo "##vso[task.setvariable variable=SHARED_IMAGE_GALLERY_RESOURCE_GROUP;]$SHARED_IMAGE_GALLERY_RESOURCE_GROUP"
      echo "##vso[task.setvariable variable=SHARED_IMAGE_GALLERY_NAME;]$SHARED_IMAGE_GALLERY_NAME"
      echo "##vso[task.setvariable variable=SHARED_IMAGE_GALLERY_IMAGE_NAME;]$SHARED_IMAGE_GALLERY_IMAGE_NAME"
      echo "##vso[task.setvariable variable=SHARED_IMAGE_GALLERY_IMAGE_VERSION;]$SHARED_IMAGE_GALLERY_IMAGE_VERSION"
      echo "##vso[task.setvariable variable=SHARED_IMAGE_GALLERY_REPLICATED_REGIONS;]$SHARED_IMAGE_GALLERY_REPLICATED_REGIONS"
      echo "##vso[task.setvariable variable=TAGS;]$TAGS"
    displayName: Import variables from build SIG job
  - template: k8s-config.yaml
  - script: |
      set -euo pipefail
      [[ -n ${DEBUG:-} ]] && set -o xtrace

      export PATH=${PATH}:.local/bin
      ./packer/azure/scripts/ensure-kustomize.sh

      # Generate cluster template with kustomize
      if [ "$OS_TYPE" == "Windows" ]; then
        kustomize build --load-restrictor LoadRestrictionsNone $(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/windows/ > $(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/cluster-template.yaml
      else
        kustomize build --load-restrictor LoadRestrictionsNone $(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/linux/ > $(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/cluster-template.yaml
      fi
      TEST_TEMPLATE=$(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/cluster-template.yaml
      echo "##vso[task.setvariable variable=TEST_TEMPLATE;]$TEST_TEMPLATE"
    displayName: generate cluster template
    workingDirectory: '$(system.defaultWorkingDirectory)/images/capi'
  - task: PipAuthenticate@1
    inputs:
      artifactFeeds: 'AzureContainerUpstream'
      onlyAddExtraIndex: true
  - script: |
      set -euo pipefail
      [[ -n ${DEBUG:-} ]] && set -o xtrace

      os=$(echo "$OS_TYPE" | tr '[:upper:]' '[:lower:]')

      # Set up the Azure CLI Cluster API extension
      # For example, https://github.com/Azure/azure-capi-cli-extension/releases/download/az-capi-nightly/capi-0.0.vnext-py2.py3-none-any.whl
      az extension add --yes --source "${AZ_CAPI_EXTENSION_URL}"

      # Install required binaries
      mkdir ~/test-binaries
      export PATH=${PATH}:~/test-binaries
      az capi install -a -ip ~/test-binaries

      echo "##vso[task.setvariable variable=PATH;]$PATH"
    displayName: Install and configure az capi extension
  - task: AzureCLI@2
    displayName: Create a cluster
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION)'
      scriptLocation: inlineScript
      scriptType: bash
      workingDirectory: '$(system.defaultWorkingDirectory)/images/capi'
      inlineScript: |
        set -euo pipefail
        [[ -n ${DEBUG:-} ]] && set -o xtrace

        params=()
        if [ "$OS_TYPE" == "Windows" ]; then
          params+=(--windows)
        fi

        RESOURCE_GROUP=${MANAGED_IMAGE_RESOURCE_GROUP_NAME}
        AZURE_LOCATION=${MANAGED_IMAGE_LOCATION}
        # Create a cluster
        az capi create \
          --yes \
          --debug \
          --name testvm \
          --kubernetes-version="${KUBERNETES_VERSION}" \
          --location="${AZURE_LOCATION}" \
          --resource-group="${RESOURCE_GROUP}" \
          --management-cluster-resource-group-name="${RESOURCE_GROUP}" \
          --control-plane-machine-count=1 \
          --node-machine-count=1 \
          --template="${TEST_TEMPLATE}" \
          --tags="${TAGS}" \
          --wait-for-nodes=2 \
          "${params[@]}"

          # test if the vm's provisionState is "Succeeded" otherwise fail
          # even though the node is reporting Ready, it still takes a moment for the Azure VM to go to Succeeded
          timeout 60s bash -c "while ! az vm list -g ${RESOURCE_GROUP} | jq -e 'all(.provisioningState == \"Succeeded\")'; do sleep 1; done"
  - task: AzureCLI@2
    displayName: Clean up test resource group
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION)'
      scriptLocation: inlineScript
      scriptType: bash
      workingDirectory: '$(system.defaultWorkingDirectory)/images/capi'
      inlineScript: |
        set -euo pipefail
        [[ -n ${DEBUG:-} ]] && set -o xtrace

        # Clean up the test resource group
        RESOURCE_GROUP=${MANAGED_IMAGE_RESOURCE_GROUP_NAME}
        echo az group delete -n "${RESOURCE_GROUP}" --yes --no-wait
    condition: always()
